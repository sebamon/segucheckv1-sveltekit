generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:@localhost:3306/segucheck"
}

model Users {
  user_id     Int            @id @default(autoincrement())
  email       String         @unique(map: "User_email_key")
  name        String
  lastName    String
  cuit        String
  gender      String
  dateOfBirth DateTime
  nationality String
  studyLevel  String
  degree      String
  profilePic  String
  // dni   String
  password    String
  roles       UsersOnRoles[]

  operator Operator?
}

model Roles {
  rol_id         Int    @id @default(autoincrement())
  rolDescription String

  user UsersOnRoles[]
}

model UsersOnRoles {
  user_id    Int
  user       Users    @relation(fields: [user_id], references: [user_id])
  rol_id     Int
  rol        Roles    @relation(fields: [rol_id], references: [rol_id])
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([user_id, rol_id])
}

model Operator {
  operator_id Int   @id @default(autoincrement())
  user        Users @relation(references: [user_id], fields: [user_id])
  user_id     Int   @unique

  userHealthInfo UserHealthInfo?
  userAddress    UserAddress?
  userWorkInfo   UserWorkInfo?
  folder         Folder[]
  operatorOnJobs OperatorOnJobs[]
}

model UserHealthInfo {
  operator_id Int
  operator    Operator @relation(references: [operator_id], fields: [operator_id])
  bloodType   String
  rh          Boolean
  allergies   String

  @@id([operator_id])
}

model UserAddress {
  operator_id        Int
  operator           Operator @relation(references: [operator_id], fields: [operator_id])
  countryOfOrigin    String
  stateOfOrigin      String
  cityOfOrigin       String
  zipCodeOfOrigin    Int
  addressOfOrigin    String
  phoneOfOrigin      String
  countryOfResidence String
  stateOfResidence   String
  cityOfResidence    String
  zipCodeOfResidence Int
  addressOfResidence String
  phoneOfResidence   String

  @@id([operator_id])
}

model UserWorkInfo {
  operator_id    Int
  operator       Operator @relation(references: [operator_id], fields: [operator_id])
  dischargeDate  DateTime //que es esto
  employementRel String
  hiringMode     String //que es esto
  unionAgreement String //que es esto
  job            String

  @@id([operator_id])
}

model DocumentType {
  documentType_id Int    @id @default(autoincrement())
  description     String

  Documentation Documentation[]
}

model Documentation {
  documentation_id Int          @id @default(autoincrement())
  documentType     DocumentType @relation(fields: [documentType_id], references: [documentType_id])
  documentType_id  Int
  urlPdf           String
  status           String
  created_at       DateTime     @default(now())
  updated_at       DateTime?
  expirated_at     DateTime?

  folder Folder[]

}

model Folder {
  operator_id      Int
  operator         Operator      @relation(fields: [operator_id], references: [operator_id])
  documentation_id Int
  documentation    Documentation @relation(fields: [documentation_id], references: [documentation_id])

  @@id([operator_id, documentation_id])
}

model RiskAnalysis {
  riskAnalysis_id Int     @id @default(autoincrement())
  riskName        String
  riskUrl         String
  description     String?

  Jobs Jobs[]
}

model Customer {
  customer_id  Int    @id @default(autoincrement())
  bussinesName String
  contact      String
  phone        String
  email        String

  // job Job[]
  Location               Location[]
  RequieredDocumentation RequieredDocumentation[]
  Jobs                   Jobs[]
}

model Location {
  location_id  Int    @id @default(autoincrement())
  locationName String
  coordenates  String

  customer_id Int
  customer    Customer @relation(fields: [customer_id], references: [customer_id])

  Jobs Jobs[]
}

model Vehicle {
  vehicle_id      Int     @id @default(autoincrement())
  domain          String
  brand           String
  model           Int
  type            String
  year            Int
  chasisNumber    String?
  motorNumber     String?
  frontPicUrl     String?
  leftSidePicUrl  String?
  rigthSidePicUrl String?
  backPicUrl      String?

  vehicleOnVehicleRequirement VehicleOnVehicleRequirement[]

  created_at DateTime  @default(now())
  updated_at DateTime?
  Jobs       Jobs[]
}

model VehicleRequirements {
  vehicleRequiriment_id  Int      @id @default(autoincrement())
  requirimentName        String
  requirementDescription String
  urlPdf                 String
  created_at             DateTime @default(now())
  expirated_At           DateTime

  vehicleOnVehicleRequirement VehicleOnVehicleRequirement[]
}

model VehicleOnVehicleRequirement {
  vehicle_id            Int
  vehicle               Vehicle             @relation(fields: [vehicle_id], references: [vehicle_id])
  vehicleRequiriment_id Int
  vehicleRequirement    VehicleRequirements @relation(fields: [vehicleRequiriment_id], references: [vehicleRequiriment_id])


  @@id([vehicle_id, vehicleRequiriment_id])
}

model RequieredDocumentation {
  requiredDocumentation_id Int    @id @default(autoincrement())
  name                     String
  description              String

  customer_id Int
  customer    Customer @relation(fields: [customer_id], references: [customer_id])


  RequierdDocumentationItem RequierdDocumentationItem[]
  Jobs                      Jobs[]
}

model RequierdDocumentationItem {
  requiredDocumentationItem_id Int    @id @default(autoincrement())
  name                         String
  description                  String

  requiredDocumentation_id Int
  requiredDocumentarion    RequieredDocumentation @relation(fields: [requiredDocumentation_id], references: [requiredDocumentation_id])

  created_at DateTime  @default(now())
  updated_at DateTime?
}

model CheckItem {
  checkItem_id Int    @id @default(autoincrement())
  item         String
  description  String

  CheckItemGroup CheckItemGroup[]
}

model CheckItemGroup {
  checkItemGroup_id Int       @id @default(autoincrement())
  groupName         String
  checkItem_id      Int
  checkItem         CheckItem @relation(fields: [checkItem_id], references: [checkItem_id])
  Jobs              Jobs[]
}

model Jobs {
  job_id     Int      @id @default(autoincrement())
  startDate  DateTime
  finishDate DateTime
  status     String

  riskAnalysis_id          Int
  riskAnalysis             RiskAnalysis           @relation(fields: [riskAnalysis_id], references: [riskAnalysis_id])
  location_id              Int
  location                 Location               @relation(fields: [location_id], references: [location_id])
  customer_id              Int
  customer                 Customer               @relation(fields: [ customer_id], references: [customer_id])
  vehicle_id               Int
  vehicle                  Vehicle                @relation(fields: [vehicle_id], references: [vehicle_id])
  checkItemGroup_id        Int
  checkItemGroup           CheckItemGroup         @relation(fields: [checkItemGroup_id], references: [checkItemGroup_id])
  requiredDocumentation_id Int
  requierdDocumentation    RequieredDocumentation @relation(fields: [requiredDocumentation_id], references: [requiredDocumentation_id])

  operatorOnJobs OperatorOnJobs[]

  created_at DateTime  @default(now())
  updated_at DateTime?

}

model OperatorOnJobs{
  job_id Int
  job Jobs @relation(fields:[job_id], references:[job_id])
  operator_id Int
  operator Operator @relation(fields:[operator_id], references:[operator_id])

  @@id([job_id,operator_id])
}