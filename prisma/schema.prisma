generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:@localhost:3306/segucheck"
}

model checkitem {
  checkItem_id   Int              @id @default(autoincrement())
  item           String
  description    String
  checkitemgroup checkitemgroup[]
}

model checkitemgroup {
  checkItemGroup_id Int       @id @default(autoincrement())
  groupName         String
  checkItem_id      Int
  checkitem         checkitem @relation(fields: [checkItem_id], references: [checkItem_id], map: "CheckItemGroup_checkItem_id_fkey")
  jobs              jobs[]

  @@index([checkItem_id], map: "CheckItemGroup_checkItem_id_fkey")
}

model customer {
  customer_id            Int                      @id @default(autoincrement())
  businessName           String
  contact                String
  phone                  String
  email                  String
  jobs                   jobs[]
  location               location[]
  requiereddocumentation requiereddocumentation[]
}

model documentation {
  documentation_id Int          @id @default(autoincrement())
  documentType_id  Int
  urlPdf           String
  status           String
  created_at       DateTime     @default(now())
  updated_at       DateTime?
  expirated_at     DateTime?
  documenttype     documenttype @relation(fields: [documentType_id], references: [documentType_id], map: "Documentation_documentType_id_fkey")
  folder           folder[]

  @@index([documentType_id], map: "Documentation_documentType_id_fkey")
}

model documenttype {
  documentType_id Int             @id @default(autoincrement())
  description     String
  documentation   documentation[]
}

model folder {
  operator_id      Int
  documentation_id Int
  documentation    documentation @relation(fields: [documentation_id], references: [documentation_id], map: "Folder_documentation_id_fkey")
  operator         operator      @relation(fields: [operator_id], references: [operator_id], map: "Folder_operator_id_fkey")

  @@id([operator_id, documentation_id])
  @@index([documentation_id], map: "Folder_documentation_id_fkey")
}

model jobs {
  job_id                   Int                    @id @default(autoincrement())
  startDate                DateTime
  finishDate               DateTime
  status                   String
  riskAnalysis_id          Int?
  location_id              Int
  customer_id              Int
  vehicle_id               Int?
  checkItemGroup_id        Int?
  requiredDocumentation_id Int?
  created_at               DateTime               @default(now())
  updated_at               DateTime?
  checkitemgroup           checkitemgroup?         @relation(fields: [checkItemGroup_id], references: [checkItemGroup_id], map: "Jobs_checkItemGroup_id_fkey")
  customer                 customer               @relation(fields: [customer_id], references: [customer_id], map: "Jobs_customer_id_fkey")
  location                 location               @relation(fields: [location_id], references: [location_id], map: "Jobs_location_id_fkey")
  requiereddocumentation   requiereddocumentation? @relation(fields: [requiredDocumentation_id], references: [requiredDocumentation_id], map: "Jobs_requiredDocumentation_id_fkey")
  riskanalysis             riskanalysis?           @relation(fields: [riskAnalysis_id], references: [riskAnalysis_id], map: "Jobs_riskAnalysis_id_fkey")
  vehicle                  vehicle?                @relation(fields: [vehicle_id], references: [vehicle_id], map: "Jobs_vehicle_id_fkey")
  operatoronjobs           operatoronjobs[]

  @@index([checkItemGroup_id], map: "Jobs_checkItemGroup_id_fkey")
  @@index([customer_id], map: "Jobs_customer_id_fkey")
  @@index([location_id], map: "Jobs_location_id_fkey")
  @@index([requiredDocumentation_id], map: "Jobs_requiredDocumentation_id_fkey")
  @@index([riskAnalysis_id], map: "Jobs_riskAnalysis_id_fkey")
  @@index([vehicle_id], map: "Jobs_vehicle_id_fkey")
}

model location {
  location_id  Int      @id @default(autoincrement())
  locationName String
  coordenites  String?
  customer_id  Int
  customer     customer @relation(fields: [customer_id], references: [customer_id], map: "Location_customer_id_fkey")
  jobs         jobs[]
  province    String

  @@index([customer_id], map: "Location_customer_id_fkey")
}

model operator {
  operator_id    Int              @id @default(autoincrement())
  user_id        Int              @unique(map: "Operator_user_id_key")
  users          users            @relation(fields: [user_id], references: [user_id], map: "Operator_user_id_fkey")
  folder         folder[]
  operatoronjobs operatoronjobs[]
  useraddress    useraddress?
  userhealthinfo userhealthinfo?
  userworkinfo   userworkinfo?
}

model operatoronjobs {
  job_id      Int
  operator_id Int
  jobs        jobs     @relation(fields: [job_id], references: [job_id], map: "OperatorOnJobs_job_id_fkey")
  operator    operator @relation(fields: [operator_id], references: [operator_id], map: "OperatorOnJobs_operator_id_fkey")

  @@id([job_id, operator_id])
  @@index([operator_id], map: "OperatorOnJobs_operator_id_fkey")
}

model requierddocumentationitem {
  requiredDocumentationItem_id Int                    @id @default(autoincrement())
  name                         String
  description                  String
  requiredDocumentation_id     Int
  created_at                   DateTime               @default(now())
  updated_at                   DateTime?
  requiereddocumentation       requiereddocumentation @relation(fields: [requiredDocumentation_id], references: [requiredDocumentation_id], map: "RequierdDocumentationItem_requiredDocumentation_id_fkey")

  @@index([requiredDocumentation_id], map: "RequierdDocumentationItem_requiredDocumentation_id_fkey")
}

model requiereddocumentation {
  requiredDocumentation_id  Int                         @id @default(autoincrement())
  name                      String
  description               String
  customer_id               Int
  customer                  customer                    @relation(fields: [customer_id], references: [customer_id], map: "RequieredDocumentation_customer_id_fkey")
  jobs                      jobs[]
  requierddocumentationitem requierddocumentationitem[]

  @@index([customer_id], map: "RequieredDocumentation_customer_id_fkey")
}

model riskanalysis {
  riskAnalysis_id Int     @id @default(autoincrement())
  riskName        String
  riskUrl         String
  description     String?
  jobs            jobs[]
}

model roles {
  rol_id         Int            @id @default(autoincrement())
  rolDescription String
  usersonroles   usersonroles[]
}

model useraddress {
  operator_id        Int      @id
  countryOfOrigin    String
  stateOfOrigin      String
  cityOfOrigin       String
  zipCodeOfOrigin    String
  addressOfOrigin    String
  phoneOfOrigin      String
  countryOfResidence String
  stateOfResidence   String
  cityOfResidence    String
  zipCodeOfResidence String
  addressOfResidence String
  phoneOfResidence   String
  operator           operator @relation(fields: [operator_id], references: [operator_id], map: "UserAddress_operator_id_fkey")
}

model userhealthinfo {
  operator_id Int      @id
  bloodType   String
  rh          Boolean
  allergies   String
  operator    operator @relation(fields: [operator_id], references: [operator_id], map: "UserHealthInfo_operator_id_fkey")
}

model users {
  user_id      Int            @id @default(autoincrement())
  email        String         @unique
  firstName    String
  lastName     String
  cuit         String         @unique
  gender       String
  dateOfBirth  DateTime
  phone        String
  nationality  String
  studyLevel   String
  degree       String
  profilePic   String?
  password     String
  active       Boolean        @default(true)
  operator     operator?
  usersonroles usersonroles[]
  deleted Boolean @default(false)
  @@unique(fields: [cuit, password], name: "credentials")

}

model usersonroles {
  user_id    Int
  rol_id     Int
  assignedAt DateTime @default(now())
  assignedBy String
  roles      roles    @relation(fields: [rol_id], references: [rol_id], map: "UsersOnRoles_rol_id_fkey")
  users      users    @relation(fields: [user_id], references: [user_id], map: "UsersOnRoles_user_id_fkey")

  @@id([user_id, rol_id])
  @@index([rol_id], map: "UsersOnRoles_rol_id_fkey")
}

model userworkinfo {
  operator_id    Int      @id
  dischargeDate  DateTime
  employementRel String
  hiringMode     String
  unionAgreement String
  job            String
  operator       operator @relation(fields: [operator_id], references: [operator_id], map: "UserWorkInfo_operator_id_fkey")
}

model vehicle {
  vehicle_id                  Int                           @id @default(autoincrement())
  domain                      String                        @unique 
  brand                       String
  model                       String
  type                        String
  year                        Int
  internNumber                Int
  chasisNumber                String?
  motorNumber                 String?
  frontPicUrl                 String?
  leftSidePicUrl              String?
  rightSidePicUrl             String?
  backPicUrl                  String?
  status                      Boolean                       @default(true)
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime?
  jobs                        jobs[]
  vehicleonvehiclerequirement vehicleonvehiclerequirement[]

}

model vehicleonvehiclerequirement {
  vehicle_id            Int
  vehicleRequiriment_id Int
  vehiclerequirements   vehiclerequirements @relation(fields: [vehicleRequiriment_id], references: [vehicleRequiriment_id], map: "VehicleOnVehicleRequirement_vehicleRequiriment_id_fkey")
  vehicle               vehicle             @relation(fields: [vehicle_id], references: [vehicle_id], map: "VehicleOnVehicleRequirement_vehicle_id_fkey")

  @@id([vehicle_id, vehicleRequiriment_id])
  @@index([vehicleRequiriment_id], map: "VehicleOnVehicleRequirement_vehicleRequiriment_id_fkey")
}

model vehiclerequirements {
  vehicleRequiriment_id       Int                           @id @default(autoincrement())
  requirimentName             String
  requirementDescription      String
  urlPdf                      String
  created_at                  DateTime                      @default(now())
  expirated_At                DateTime
  vehicleonvehiclerequirement vehicleonvehiclerequirement[]
}
